@require: class-slydifi/theme/akasaka
@require: enumitem/enumitem
@require: easytable/easytable
@require: figbox/figbox
@require: colorbox/colorbox
@require: math

open FigBox
open EnumitemAlias
open EasyTableAlias

let-math \bits = ${\mathop{\mathrm{bits}}}
let-math \lg = ${\mathop{\mathrm{lg}}}
let-math \access = ${\mathrm{access}}
let-math \rank = ${\mathrm{rank}}
let-math \select = ${\mathrm{select}}
let-math \dummy = ${}
let-math \binom n k = ${\dummy_{#n} \mathrm{C}_{#k} }
let-math \func m n = ${\app{\mathrm{#m}}{#n}}
let-math \ifthen cond t f = ${\mathbin{\mathrm{if}} #cond \mathbin{\mathrm{then}} #t \mathbin{\mathrm{else}} #f}

let-inline \qed = {▪}

let-block ctx +definition ?:wordopt inner = 
  let ib-word =
    match wordopt with
    | None       -> {}
    | Some(word) -> {\ (#word;).}
  in
  read-block ctx '<
    +Colorbox.colorbox [] ?:({定義 #ib-word;}) (inner);
  >

let-block ctx +theorem ?:wordopt inner = 
  let ib-word =
    match wordopt with
    | None       -> {}
    | Some(word) -> {\ (#word;).}
  in
  read-block ctx '<
    +Colorbox.colorbox [] ?:({定理 #ib-word;}) (inner);
  >
let-block ctx +lemma ?:wordopt inner = 
  let ib-word =
    match wordopt with
    | None       -> {}
    | Some(word) -> {\ (#word;).}
  in
  read-block ctx '<
    +Colorbox.colorbox [] ?:({補題 #ib-word;}) (inner);
  >


in

document'<
  +make-title(|
    title = {|簡潔データ構造 第5回|Wavelet Matrix|};
    author = {|marimo|};
    date = {|2023年5月30日|};
  |);
  +frame{${\rank}と${\select}の拡張}<
    +p{
      ビットベクトルの${\rank}と${\select}は文字列に拡張できる。
    }
    +p{
      アルファベット${A}上の長さ${n}の文字列${S}, ${c \in A}について
    }
    +listing{
      * ${\app{\access}{i} = S\sqbracket{i}}
      * ${\app{\rank_c}{i} = S\sqbracket{0..i}\text!{の中のcの数を返す}}
      * ${\app{\select_c}{i} = S\text!{の中の${i}番目のcの位置を返す}}
    }
  >
  +frame{Wavelet Tree}<
    +p{
      一旦${\sigma = \| A \|}を2ベキと仮定する。
    }
    +theorem?:({Wavelet Tree})<
      +p{
        長さ${n}，アルファベットサイズ${\sigma}の文字列に対して，${\paren{n + \app{o}{n}}\lg \sigma + \app{O}{\sigma\lg n}\bits}のデータ構造が存在して，
        ${\access, \rank, \select}は${\app{O}{\lg \sigma}}時間で計算できる。
      }
    >
  >
  +frame{Wavelet Tree}<
    +p{
      次のように構成されるWavelet Treeによって達成できる。${A}の符号には自明な符号化を使う。
    }
    +listing{
      * 各ノードにビットベクトルが載っているポインタによる完全2分木を作る。
      * 符号の${i}ビット目のビットは深さ${i}のノードに次のように乗る
        ** 根のベクトルは長さ${n}で，${B\sqbracket{i} = \app{C}{S\sqbracket{i}} \sqbracket{0}}で定める。
        ** ノード${v_{b_0 \ldots b_{i - 1}}}のベクトルは
           *** 符号の先頭が${b_0 \ldots b_{i - 1}}というビット列になっている文字の符号の${i}ビット目のビットを文字列の順番で格納する
    }
    +p{
      これでは分からんので次の図を見る\footnote{基数ソートを途中経過を全部持ってるみたいな感じ}
    }
  >
  +frame{Wavelet Tree}<
    +fig-center(hconcat?:(align-center)[
      vconcat?:(align-center)[
        include-image-with-height 150pt `fig/trivial_code_tree.pdf` |> hvmargin 1pt |> frame 1pt Color.black;
        gap 2pt;
        textbox {自明な符号木(の1つ)}
      ];
      gap 3pt;
      vconcat?:(align-center)[
        include-image-with-height 310pt `fig/wavelet_tree.pdf` |> hvmargin 1pt |> frame 1pt Color.black;
        gap 2pt;
        textbox {Wavelet Tree}
      ];
    ]);
  >
  +frame{Wavelet Tree}<
    +p{
      ${\app{\access}{i}}は次のようにする
    }
    +listing{
      * ${ s \leftarrow V \sqbracket{i} }
      * ${ i \leftarrow \app{\rank_s}{V, i}}
      * ${d}を${1}から${\lg \sigma}まで
        ** ${b \leftarrow V_s \sqbracket{i}}
        ** ${i \leftarrow \app{\rank_b}{V_s, i}}
        ** ${s \leftarrow s \circ b}
           *** ${s}のうしろに${b}をくっつける
    }
  >
  +frame{Wavelet Tree}<
    +p{
      ${\app{\rank_c}{i}}は次のようにする
    }
    +listing{
      * ${t \leftarrow \app{C}{c}}
      * ${d}を${0}から${\lg \sigma - 1}まで
        ** ${b \leftarrow t \sqbracket{d}}
        ** ${i \leftarrow \app{\rank_b}{V_{t\sqbracket{0..d}}, i} }
    }
  >
  +frame{Wavelet Tree}<
    +p{
      ${\app{\select_c}{i}}は次のようにする
    }
    +listing{
      * ${t \leftarrow \app{C}{c}}
      * ${d}を${\lg \sigma - 1}から${0}まで
        ** ${b \leftarrow t \sqbracket{d}}
        ** ${i \leftarrow \app{\select_b}{V_{t\sqbracket{0..d}}, i} }
    }
  >
  +frame{Wavelet Matrix}<
    +p{
      Wavelet Treeで，同じ深さのベクトルの長さを全部足すと${n}でかわらない
    }
    +p{
      全部を一つのベクトルにしてしまったら簡単になるのでは${\rightarrow}Wavelet Matrix
    }
    +p{
      簡単のために深さ${d}のベクトルをつなげたものを${V_d}と書くが，実際は${V_d}は一本のベクトル${V}の一部
    }
    +fig-center(vconcat[
      include-image 250pt `fig/wavelet_matrix.pdf` |> hvmargin 1pt |> frame 1pt Color.black;
    ]);
  >
  +frame{Wavelet Matrix}<
    +p{
      ${\app{\access}{i}}は次のようにする
    }
    +listing{
      * ${ s \leftarrow NULL }
      * ${d}を${0}から${\lg \sigma - 1}まで
        ** ${b \leftarrow V_d \sqbracket{i}}
        ** ${s \leftarrow s \circ b}
        ** ${w \leftarrow \app{\rank_0}{V_d, n}}
        ** ${\ifthen{b = 0}{ i \leftarrow \app{\rank_0}{V_d, i} }{ i \leftarrow w + \app{\rank_1}{V_d, i} }}
    }
  >
  +frame{Wavelet Matrix}<
    +p{
      ${\app{\rank_c}{i}}は次のようにする
    }
    +listing{
      * ${t \leftarrow \app{C}{c}}
      * ${ l, r \leftarrow 0, i }
      * ${d}を${0}から${\lg \sigma - 1}まで
        ** ${b \leftarrow t \sqbracket{d}}
        ** ${w \leftarrow \app{\rank_0}{V_d, n}}
        ** ${\ifthen{b = 0}{l \leftarrow \app{\rank_0}{V_d, l},  r \leftarrow \app{\rank_0}{V_d, r} }{ l \leftarrow w + \app{\rank_1}{V_d, l}, r \leftarrow w + \app{\rank_1}{V_d, r} }}
      * ${r - l}
    }
  >
  +frame{Wavelet Matrix}<
    +p{
      ${\app{\select_c}{i}}については疑似コードを書くと長いのでお気持ちだけ書くと
    }
    +listing{
      * まず${\app{C}{c}}を使って降りていって，${c}がいる範囲を知る
      * この範囲で${\app{\select_b}{i}}をつかって位置を知る
      * 逆向きに上がっていく
        ** ${\rank}で降りていたことから分かるように逆演算の${\select}で上がる
    }
  >
  +frame{Huffman符号の使用}<
    +p{
      これまでアルファベットのサイズを2ベキと仮定していた。
    }
    +p{
      Wavelet Treeで自明な符号化でなくて，Huffman符号\footnote{prefix codeならなんでもOK}を使うようにすればアルファベットサイズが2べきでなくても簡潔な構造にすることができる。
    }
    +p{
      うれしい
    }
  >
  +frame{その他の演算}<
    +p{
      詳しくは述べないが，符号化が順序を保つ場合\footnote{先のHuffman Codeは順序を保たないことに注意}\footnote{この条件を満たすような符号は条件が無い場合に比べて多少長くなることが知られている。最適なものをHu-Tucker Algorithmで構成できる。}いろいろできる
    }
    +listing{
      * 区間内の文字の列挙
      * 区間内のある範囲に含まれる文字の総数
      * 区間内のk番目に大きい文字の位置
      * etc.
    }
  >
>

