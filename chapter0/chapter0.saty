@require: class-slydifi/theme/akasaka
@require: figbox/figbox
@require: enumitem/enumitem
@require: math

open FigBox
open SlydifiOverlay

let-math \bits = ${\mathop{\mathrm{bits}}}
let-math \iff = ${\Leftrightarrow}
let-math \lg = math-char MathOrd `lg`

in

document '<
  +make-title(|
    title = {|簡潔データ構造 第0回|};
    author = {|marimo|};
    date = {|2023年4月18日|};
  |);
  +section{|言葉と記号の準備|}<
    +frame{アルゴリズムとは}<
      +p{
        何かしらの問題を解くための，機械的な操作からなる有限の手続き
      }
      +p{
        個別のプログラムとは異なる
      }
      +p{
        例: ユークリッドの互除法
      }
      +listing{
        * 教科書にのっている手続きはアルゴリズム
        * これをC++とかで書いたものは互除法の実装であってアルゴリズムではない
      }
    >
    +frame{データ構造とは}<
      +p{
        普通，アルゴリズムはデータを扱う
      }
      +p{
        機械の上でのデータの持ち方と索引を合わせて\emph{データ構造}とよぶ
      }
      +p{
        データ構造とアルゴリズムは不可分
      }
    >
    +frame{アルゴリズムの良さ}<
      +p{
        アルゴリズムの良し悪しをどのように測るか？
      }
      +listing{
        * 速い(実行時間が短い)
        * 使用メモリが少ない
      }
      +p{
        実際の機械に依存する議論はしたくないので，理想化された計算機を考えたい
      }
    >
    +frame{計算モデル}<
      +p{
        計算を理論的に考えるための数理モデル
      }
      +p{
        現実の機械に似せたものから抽象的なものまでいろいろある
      }
      +listing{
        * チューリングマシン
        * RAM(Random Access Machine)
        * ラムダ計算
        * 有限オートマトン
        * etc
      }
    >
    +frame{例:RAM}<
      +p{
        計算量解析によく使うモデル。陽に書いてなければだいたいこれ。 \br;
        おおざっぱに言えば
      }
      +listing{
        * メモリは沢山の「セル」から成る
        * メモリの1つのセルには任意の桁数の整数が入る
        * 1つのセルの読み出し，書き込みは単位時間でできる
        * 任意の桁数の整数の加減乗除およびビット演算が単位時間でできる
        * 制御も単位時間でできる
          ** 具体的には条件分岐とジャンプと停止
      }
    >
    +frame{Word-RAM}<
      +p{
        さっきのRAMモデルは実際の計算機よりも強すぎるので，
        いくらか実際に寄せたものとしてWord-RAMモデルというものが存在する。\br;
        雑に言えばさっきのRAMの操作を語長(word-size)単位に制限したもの。
      }
      +listing{
        * パラメータとして語長 ${w}を持つ
        * メモリはビット列
          ** 長さは高々${2^w \bits}
          ** ポインタが${w \bits}になる
        * メモリの連続する${w \bits}の読み出し，書き込みが単位時間でできる
          ** 開始地点はどこでもいい
        * ${w \bits}の整数の加減乗除およびビット演算が単位時間でできる
        * 制御も単位時間
      }
      +p{
        この講座？では計算量を議論するときこれを使います
      }
    >
    +frame{計算量}<
      +p{
        ある計算モデルの上でアルゴリズムを動かしたとき，どれだけの時間と空間を使うか調べられる。
        これは入力に対する関数になる。
      }
      +p{
        これらをそれぞれ\emph{時間計算量}\footnote{しばしば時間計算量を単に計算量と言う}，\emph{空間計算量}と呼ぶ。
      }
      +p{
        大抵の場合は精密な値よりも入力サイズに対する増加のスピードの方が興味があるので，次に説明するオーダー記法で書かれがち。
      }
    >
    +frame?:(2){ランダウの記号}<
      +p{
        ある関数${\app{g}{n}}に対して次の集合を定める。
      }
      +listing{
        * ${\app{O}{\app{g}{n}} = \setsep{f}{\exists c \geq 0, \lim_{n \to \infty} \frac{\app{f}{n}}{\app{g}{n}} \leq c}}
        * ${\app{o}{\app{g}{n}} = \setsep{f}{\lim_{n \to \infty} \frac{\app{f}{n}}{\app{g}{n}} = 0}}
      }
      +p?:(from 2){
        たいていの場合
        \eqn(${\app{f}{n} \in \app{O}{\app{g}{n}} \iff \app{f}{n} = \app{O}{\app{g}{n}}});
        \eqn(${\exists \app{h}{n} \in \app{O}{\app{g}{n}}, \app{f}{n} = \app{f'}{n} + \app{h}{n} \iff \app{f}{n} = \app{f'}{n} + \app{O}{\app{g}{n}}});
        などと濫用される。
      }
    >
    +frame{ランダウの記号}<
      +p{
        いくらか例を見ましょう。記号を濫用しているので注意。
      }
      +align [
        ${| n | = \app{O}{n}|};
        ${| n | \neq \app{o}{n}|};
        ${| \log n | = \app{o}{n} = \app{O}{n}|};
        ${| n \log n | = \app{O}{n^2}|};
        ${| \app{O}{n} \times \app{O}{\log n} | = \app{O}{n \log n} |};
        ${| \app{O}{\frac{n}{\log n}} \times \app{O}{\log n} | = \app{O}{n} |};
        ${| \app{O}{n} | = \app{O}{n^{1.5}} = \app{O}{n^2} |};
      ];
    >
  >
  +section{|簡潔データ構造とは|}<
    +frame{情報理論的下限}<
      +p{
        大きさ${L}の集合の中の1つの要素を表現するために必要なビット数の\emph{情報理論的下限}を${⌈\lg L⌉ \bits}と定義する。
      }
      +p{
        たとえば${A = \set{1, 2, \ldots, \sigma}}の長さが${n}の列${S \in A^n}の情報理論的下限は${⌈n\lg \sigma⌉ \bits}である。
        一方で自明な文字列の表現は${n⌈\lg \sigma⌉ \bits}であるので，${\sigma}が2ベキのときだけ下限と一致する。
      }
      +p{
        適当な表現によって集合の中の\emph{ある}要素はこれより短く表現できるかもしれないが，\emph{全て}の要素をこれより短く表現することはできない。\footnote{なぜでしょう？}
      }
    >
    +frame?:(3){簡潔データ構造}<
      +p{
        \emph{簡潔データ構造}(succinct data structure)はデータの\emph{簡潔表現}(succinct representation)と\emph{簡潔索引}(succinct index)から成る。
      }
      +p?:(from 2){
        大きさ${L}の集合${U}に対する\emph{簡潔表現}とは，任意の${x \in U}に対して${x}を表現するためのビット数が${\lg L + \app{o}{\lg L} \bits}である表現のことである。
      }
      +p?:(from 2){
        任意の有限集合に対してこのような表現は存在する。
      }
      +p?:(from 3){
        \emph{簡潔索引}とは次の要件を満たす構造のことである。
        \listing{
          * 構造のビット数が${\app{o}{\lg L} \bits}である
          * クエリの時間計算量が従来のデータ構造と同程度か${\log n}のベキがかかる程度である
        }
      }
    >
    +frame{うれしさ}<
      +p{
        Q. そうやってメモリ切り詰めて何がうれしいの？今は富豪的プログラミングの時代だよ？
      }
      +p{
        クソデカデータを扱うときにうれしかったりします。たとえばDNAの全文を検索可能な形で持ちたいとか，IMEで大きめの辞書を持ちたいとか\footnote{Google/mozcではLOUDS表現によるTrie木が実装されています}，そういうときに使います。
      }
    >
  >
  +frame{予定}<
    +p{
      たぶん次回から具体的なデータ構造のおはなしをします。一旦静的なものだけを扱います。
    }
    +listing{
      * Succinct Bit Vector
      * Fully Indexed Dictionary
        ** これはやるかわからない
      * 順序木の表現
        ** LOUDSはやります。BPの${\app{O}{1}}索引は大変なのでしないと思います。
      * Wavelet Matrix
    }
    +p{
      データ構造をひとつお話をし終わったら実装パートをはさみたい
    }
  >
  +frame{予定}<
    +p{
      実装パートをどうするかはまだ未定です
    }
    +listing{
      * もくもく作業会にしてしまう?
      * プログラムを書くことについてどれぐらいサポートするか
      * 言語はGCの無いものが良いと思います
      * 実装上のテクニックの話はしたいです
    }
  >
>

